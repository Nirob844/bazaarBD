generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// User model
model User {
    id                 String              @id @default(uuid())
    name               String
    email              String              @unique
    password           String
    role               UserRole            @default(CUSTOMER)
    isVerified         Boolean             @default(false)
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt
    profile            UserProfile?
    products           Product[]
    orders             Order[]
    cart               Cart?
    payments           Payment[]
    emailNotifications EmailNotification[]
    reviews            Review[]
}

enum UserRole {
    ADMIN
    CUSTOMER
}

model UserProfile {
    id        String    @id @default(uuid())
    userId    String    @unique
    bio       String?
    avatar    String?
    phone     String?
    address   String?
    dob       DateTime?
    gender    Gender?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Gender {
    MALE
    FEMALE
}

// Product model
model Product {
    id                 String         @id @default(uuid())
    name               String
    description        String?
    price              Decimal
    discountPercentage Decimal?
    sku                String         @unique
    status             ProductStatus  @default(ACTIVE)
    categoryId         String
    userId             String
    createdAt          DateTime       @default(now())
    updatedAt          DateTime       @updatedAt
    category           Category       @relation(fields: [categoryId], references: [id])
    user               User           @relation(fields: [userId], references: [id])
    inventory          Inventory?
    orderItems         OrderItem[]
    cartItems          CartItem[]
    promotions         Promotion[]
    reviews            Review[]
    imageUrls          ProductImage[]
}

enum ProductStatus {
    DRAFT
    ACTIVE
    INACTIVE
    OUT_OF_STOCK
    DISCONTINUED
}

model ProductImage {
    id        String  @id @default(uuid())
    productId String
    url       String
    altText   String?
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// Category model
model Category {
    id        String    @id @default(uuid())
    name      String
    imageUrl  String?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    products  Product[]
}

// Inventory model
model Inventory {
    id        String             @id @default(uuid())
    productId String             @unique
    stock     Int
    product   Product            @relation(fields: [productId], references: [id])
    history   InventoryHistory[]
}

// Inventory History model
model InventoryHistory {
    id             String     @id @default(uuid())
    inventoryId    String
    action         ActionType
    quantityChange Int
    previousStock  Int
    newStock       Int
    createdAt      DateTime   @default(now())
    inventory      Inventory  @relation(fields: [inventoryId], references: [id])
}

enum ActionType {
    IN
    OUT
}

model Promotion {
    id                 String        @id @default(uuid())
    productId          String
    type               PromotionType
    discountPercentage Decimal
    product            Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
    createdAt          DateTime      @default(now())
}

enum PromotionType {
    FEATURED // Highlighted on homepage or special section
    FLASH_SALE // Limited-time discount
    BEST_DEAL // Special offers or bundle deals
    TOP_SELLING // Based on highest sales
    NEW_ARRIVAL // Recently added products
}

model Review {
    id        String  @id @default(uuid())
    productId String
    userId    String
    rating    Int
    comment   String?
    product   Product @relation(fields: [productId], references: [id])
    user      User    @relation(fields: [userId], references: [id])
}

// Order model
model Order {
    id        String      @id @default(uuid())
    userId    String
    total     Decimal
    status    OrderStatus
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    user      User        @relation(fields: [userId], references: [id])
    items     OrderItem[]
    payments  Payment[]
}

enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
}

// OrderItem model
model OrderItem {
    id        String  @id @default(uuid())
    orderId   String
    productId String
    quantity  Int
    unitPrice Decimal // Stores the price at the time of order (prevents inconsistencies)
    order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// Cart model
model Cart {
    id     String     @id @default(uuid())
    userId String     @unique
    user   User       @relation(fields: [userId], references: [id])
    items  CartItem[]
}

// CartItem model
model CartItem {
    id        String  @id @default(uuid())
    cartId    String
    productId String
    quantity  Int
    cart      Cart    @relation(fields: [cartId], references: [id])
    product   Product @relation(fields: [productId], references: [id])
}

model EmailNotification {
    id      String      @id @default(uuid())
    userId  String
    type    EmailType
    subject String
    body    String
    sentAt  DateTime    @default(now())
    status  EmailStatus
    user    User        @relation(fields: [userId], references: [id])
}

enum EmailType {
    ACCOUNT_CONFIRMATION
    ORDER_CONFIRMATION
    PAYMENT_SUCCESS
    PASSWORD_RESET
}

enum EmailStatus {
    PENDING
    SENT
    FAILED
}

model Payment {
    id            String        @id @default(uuid())
    orderId       String
    userId        String
    method        PaymentMethod
    amount        Decimal
    status        PaymentStatus
    transactionId String?       @unique
    paymentDate   DateTime      @default(now())
    currency      String        @default("BDT")
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    order         Order         @relation(fields: [orderId], references: [id])
    user          User          @relation(fields: [userId], references: [id])
}

enum PaymentMethod {
    BKASH
    NAGAD
    SSL_COMMERZ
    CARD
    COD // Cash on Delivery
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
    REFUNDED
}
