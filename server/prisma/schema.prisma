generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id                  String         @id @default(uuid())
  email               String         @unique
  password            String
  role                UserRole       @default(CUSTOMER)
  isEmailVerified     Boolean        @default(false)
  lastLogin           DateTime?
  failedLoginAttempts Int            @default(0)
  isLocked            Boolean        @default(false)
  deletionStatus      DeletionStatus @default(ACTIVE)
  deletedAt           DateTime?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  // Role-specific relationships
  customer           Customer?
  vendor             Vendor?
  admin              Admin?
  emailNotifications EmailNotification[]
  verificationCode   VerificationCode?
}

enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
  SUPER_ADMIN
}

model VerificationCode {
  id        String   @id @default(uuid())
  code      String
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

// Customer model
model Customer {
  id        String     @id @default(uuid())
  userId    String     @unique
  firstName String     @db.VarChar(100)
  lastName  String     @db.VarChar(100)
  phone     String?    @db.VarChar(20)
  avatar    String?
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  addresses Address[]
  orders    Order[]
  cart      Cart?
  reviews   Review[]
  wishlists Wishlist[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([firstName, lastName])
}

// Vendor model
model Vendor {
  id                    String           @id @default(uuid())
  userId                String           @unique
  businessName          String           @db.VarChar(200)
  businessEmail         String           @unique @db.VarChar(255)
  businessPhone         String           @db.VarChar(20)
  taxId                 String?
  isVerified            Boolean          @default(false)
  imageUrl              String?
  verificationDocuments Json? // Stores document URLs for verification
  user                  User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  shops                 Shop[]
  products              Product[]
  bankAccounts          BankAccount[]
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  deletionStatus        DeletionStatus   @default(ACTIVE)
  deletedAt             DateTime?
  analytics             VendorAnalytics?

  @@index([businessName])
}

model VendorAnalytics {
  id          String   @id @default(uuid())
  vendorId    String   @unique
  totalSales  Decimal  @default(0)
  totalOrders Int      @default(0)
  rating      Decimal? // Average review rating
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  updatedAt   DateTime @updatedAt
}

// Admin model
model Admin {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName   String
  lastName    String
  phoneNumber String?
  designation String   @default("ADMIN")
  department  String?
  isActive    Boolean  @default(true)
  permissions Json? // Store admin permissions as JSON
  notes       String? // Additional notes or comments
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("admins")
}

model AdminAnalytics {
  id             String   @id @default(uuid())
  totalUsers     Int      @default(0)
  totalOrders    Int      @default(0)
  totalRevenue   Decimal  @default(0)
  totalVendors   Int      @default(0)
  totalProducts  Int      @default(0)
  totalCustomers Int      @default(0)
  updatedAt      DateTime @updatedAt
}

// Shop model for vendors
model Shop {
  id             String         @id @default(uuid())
  name           String         @db.VarChar(200)
  slug           String         @unique
  description    String?
  logo           String?
  banner         String?
  address        String?
  contactEmail   String?        @db.VarChar(255)
  contactPhone   String?        @db.VarChar(20)
  isActive       Boolean        @default(true)
  seoTitle       String?
  seoDescription String?
  vendorId       String
  vendor         Vendor         @relation(fields: [vendorId], references: [id])
  products       Product[]
  analytics      ShopAnalytics?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletionStatus DeletionStatus @default(ACTIVE)
  deletedAt      DateTime?

  @@index([name, slug])
}

// Shop analytics
model ShopAnalytics {
  id            String   @id @default(uuid())
  shopId        String   @unique
  totalSales    Decimal  @default(0)
  totalProducts Int      @default(0)
  totalOrders   Int      @default(0)
  visitorCount  Int      @default(0)
  shop          Shop     @relation(fields: [shopId], references: [id])
  updatedAt     DateTime @updatedAt
}

// Address model (for customers)
model Address {
  id         String      @id @default(uuid())
  customerId String
  type       AddressType @default(HOME)
  label      String?     @db.VarChar(50) // e.g., "Home", "Work"

  // Contact info
  recipient String @db.VarChar(100)
  phone     String @db.VarChar(20)

  // Regional structure (Bangladesh specific)
  division   String  @db.VarChar(50) // Dhaka, Chattogram, etc.
  district   String  @db.VarChar(50)
  upazila    String  @db.VarChar(50)
  union      String? @db.VarChar(50)
  postalCode String  @db.VarChar(10)

  // Street address
  streetLine1 String  @db.VarChar(255)
  streetLine2 String? @db.VarChar(255)

  // Additional info
  country   String  @default("Bangladesh") @db.VarChar(50)
  isDefault Boolean @default(false)
  notes     String? @db.VarChar(255) // Delivery instructions

  customer  Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customerId, isDefault])
}

enum AddressType {
  HOME
  OFFICE
  OTHER
}

// Category model
model Category {
  id          String  @id @default(uuid())
  name        String  @db.VarChar(100)
  slug        String  @unique
  description String? @db.Text
  imageUrl    String?

  // Hierarchy
  parentId   String?
  parent     Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children   Category[] @relation("CategoryHierarchy")
  level      Int        @default(0)
  path       String[] // Array of category IDs in the hierarchy
  breadcrumb String[] // Array of category names in the hierarchy

  // SEO
  metaTitle       String? @db.VarChar(100)
  metaDescription String? @db.VarChar(255)
  metaKeywords    String? @db.VarChar(255)
  canonicalUrl    String? @db.VarChar(255)
  seoScore        Int?    @default(0)

  // Display
  displayOrder Int     @default(0)
  isActive     Boolean @default(true)
  showInMenu   Boolean @default(true)
  showInFooter Boolean @default(false)
  menuPosition String? @db.VarChar(50) // e.g., "main", "footer", "sidebar"
  icon         String? @db.VarChar(50) // Icon class or URL
  color        String? @db.VarChar(20) // Category color code

  // Analytics
  productCount Int      @default(0)
  viewCount    Int      @default(0)
  lastUpdated  DateTime @updatedAt

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@index([parentId, level])
  @@index([slug, isActive])
  @@index([displayOrder])
  @@index([menuPosition])
}

// Product model
model Product {
  id               String  @id @default(uuid())
  name             String  @db.VarChar(200)
  slug             String  @unique
  description      String? @db.Text
  shortDescription String? @db.VarChar(500)

  // SEO Fields
  metaTitle       String? @db.VarChar(100)
  metaDescription String? @db.VarChar(255)
  metaKeywords    String? @db.VarChar(255)
  canonicalUrl    String? @db.VarChar(255)
  seoScore        Int?    @default(0)

  // Pricing
  basePrice    Decimal
  salePrice    Decimal?
  costPrice    Decimal?
  taxRate      Decimal? @default(0)
  taxClass     String?  @db.VarChar(50)
  minimumOrder Int?     @default(1)
  maximumOrder Int?
  bulkPricing  Json? // {quantity: price} for bulk discounts

  // Inventory
  sku               String        @unique @db.VarChar(50)
  barcode           String?       @db.VarChar(50)
  status            ProductStatus @default(DRAFT)
  stockStatus       StockStatus   @default(IN_STOCK)
  lowStockThreshold Int?          @default(5)
  weight            Decimal? // in kg
  dimensions        Json? // {length, width, height} in cm
  packageSize       Json? // {length, width, height} in cm
  shippingClass     String?       @db.VarChar(50)
  isBackorder       Boolean       @default(false)
  backorderLimit    Int?

  // Marketing
  featured      Boolean   @default(false)
  bestSeller    Boolean   @default(false)
  newArrival    Boolean   @default(false)
  featuredUntil DateTime?
  viewCount     Int       @default(0)
  purchaseCount Int       @default(0)
  wishlistCount Int       @default(0)
  ratingCount   Int       @default(0)
  averageRating Decimal?  @default(0)
  totalRatings  Int       @default(0)

  // Relations
  categoryId String
  shopId     String?
  vendorId   String

  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  publishedAt   DateTime?
  lastRestocked DateTime?

  // Full Relationships
  category        Category           @relation(fields: [categoryId], references: [id])
  shop            Shop?              @relation(fields: [shopId], references: [id])
  vendor          Vendor             @relation(fields: [vendorId], references: [id])
  images          ProductImage[]
  inventory       Inventory?
  variants        ProductVariant[]
  attributes      ProductAttribute[]
  promotions      Promotion[]
  tags            ProductTag[]
  reviews         Review[]
  orderItems      OrderItem[]
  cartItems       CartItem[]
  wishlistItems   WishlistItem[]
  relatedProducts Product[]          @relation("RelatedProducts")
  relatedTo       Product[]          @relation("RelatedProducts")

  deletionStatus DeletionStatus @default(ACTIVE)
  deletedAt      DateTime?

  @@index([name, slug, status])
  @@index([featured, bestSeller, newArrival])
  @@index([viewCount, purchaseCount])
  @@index([averageRating, ratingCount])
  @@index([publishedAt])
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  OUT_OF_STOCK
  DISCONTINUED
  ARCHIVED
}

enum StockStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
  BACKORDER
  DISCONTINUED
}

model ProductImage {
  id        String  @id @default(uuid())
  productId String
  url       String
  altText   String?
  isPrimary Boolean @default(false)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

// Inventory model with variant support
model Inventory {
  id          String  @id @default(uuid())
  productId   String  @unique
  variantId   String? @unique // One-to-one with ProductVariant
  stock       Int     @default(0)
  warehouseId String?

  // Stock Management
  reservedStock     Int  @default(0) // Stock reserved for pending orders
  availableStock    Int  @default(0) // Actually available for purchase
  lowStockThreshold Int  @default(5)
  reorderPoint      Int? // When to reorder
  reorderQuantity   Int? // How much to reorder

  // Location
  location  String? @db.VarChar(100) // Specific location in warehouse
  binNumber String? @db.VarChar(50) // Storage bin number

  // Relations
  product   Product            @relation(fields: [productId], references: [id])
  variant   ProductVariant?    @relation(fields: [variantId], references: [id])
  warehouse Warehouse?         @relation(fields: [warehouseId], references: [id])
  history   InventoryHistory[]

  // Timestamps
  lastCounted DateTime?
  lastUpdated DateTime  @updatedAt
  createdAt   DateTime  @default(now())

  @@index([productId, warehouseId])
  @@index([variantId])
  @@index([availableStock])
}

model Warehouse {
  id        String      @id @default(uuid())
  name      String      @db.VarChar(100)
  location  String?
  isActive  Boolean     @default(true)
  inventory Inventory[]
}

// Enhanced InventoryHistory with more details
model InventoryHistory {
  id             String     @id @default(uuid())
  inventoryId    String
  action         ActionType
  quantityChange Int
  previousStock  Int
  newStock       Int
  referenceId    String? // Order ID, Adjustment ID, etc.
  referenceType  String?    @db.VarChar(50) // e.g., "ORDER", "ADJUSTMENT", "RETURN"
  notes          String?    @db.VarChar(500)
  performedBy    String?    @db.VarChar(50) // User ID who performed the action
  createdAt      DateTime   @default(now())
  inventory      Inventory  @relation(fields: [inventoryId], references: [id])

  @@index([inventoryId, createdAt])
  @@index([referenceId, referenceType])
  @@index([action, createdAt])
}

enum ActionType {
  PURCHASE
  SALE
  RETURN
  ADJUSTMENT
  DAMAGE
  TRANSFER
}

model ProductAttribute {
  id           String    @id @default(uuid())
  productId    String
  attributeId  String
  value        String    @db.VarChar(255)
  displayValue String?   @db.VarChar(255)
  isFilterable Boolean   @default(false)
  isVisible    Boolean   @default(true)
  displayOrder Int       @default(0)
  product      Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  attribute    Attribute @relation(fields: [attributeId], references: [id])

  @@unique([productId, attributeId])
  @@index([attributeId, value])
}

model Attribute {
  id                String             @id @default(uuid())
  name              String             @unique @db.VarChar(50)
  type              AttributeType
  description       String?            @db.VarChar(255)
  isRequired        Boolean            @default(false)
  isFilterable      Boolean            @default(false)
  isVisible         Boolean            @default(true)
  displayOrder      Int                @default(0)
  values            AttributeValue[]
  productAttributes ProductAttribute[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@index([name, type])
}

model AttributeValue {
  id           String    @id @default(uuid())
  attributeId  String
  value        String    @db.VarChar(100)
  displayValue String?   @db.VarChar(100)
  isDefault    Boolean   @default(false)
  displayOrder Int       @default(0)
  attribute    Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)

  @@unique([attributeId, value])
  @@index([attributeId, displayOrder])
}

enum AttributeType {
  TEXT
  NUMBER
  BOOLEAN
  SELECT
  MULTISELECT
  COLOR
  SIZE
  DATE
  CUSTOM
}

// ProductVariant with enhanced inventory management
model ProductVariant {
  id        String  @id @default(uuid())
  productId String
  name      String  @db.VarChar(100) // e.g., "Red - Medium"
  sku       String? @unique @db.VarChar(50)

  // Pricing
  basePrice    Decimal? // Overrides product price if set
  salePrice    Decimal?
  costPrice    Decimal?
  taxRate      Decimal? @default(0)
  taxClass     String?  @db.VarChar(50)
  minimumOrder Int?     @default(1)
  maximumOrder Int?

  // Inventory
  stockStatus    StockStatus @default(IN_STOCK)
  isBackorder    Boolean     @default(false)
  backorderLimit Int?
  weight         Decimal? // in kg
  dimensions     Json? // {length, width, height} in cm

  // Attributes
  attributes Json // Stores variant attributes like color, size, etc.
  imageUrl   String?
  barcode    String? @db.VarChar(50)
  upc        String? @db.VarChar(50) // Universal Product Code
  ean        String? @db.VarChar(50) // European Article Number

  // Status
  isActive  Boolean @default(true)
  isDefault Boolean @default(false)
  isVisible Boolean @default(true)

  // Analytics
  viewCount     Int       @default(0)
  orderCount    Int       @default(0)
  lastRestocked DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  inventory Inventory? // One-to-one with Inventory
  OrderItem OrderItem[]
  CartItem  CartItem[]

  @@index([productId, sku])
  @@index([productId, isActive])
  @@index([stockStatus])
  @@index([isDefault])
}

// Product tags for better organization
model ProductTag {
  id       String    @id @default(uuid())
  name     String    @unique @db.VarChar(50)
  products Product[]
}

model Promotion {
  id            String        @id @default(uuid())
  productId     String
  type          PromotionType
  discountValue Decimal
  isPercentage  Boolean       @default(true)
  startDate     DateTime
  endDate       DateTime
  isActive      Boolean       @default(true)
  maxUses       Int?
  currentUses   Int           @default(0)
  product       Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([productId, isActive, endDate])
}

enum PromotionType {
  FLASH_SALE
  SEASONAL
  CLEARANCE
  BUNDLE
  LOYALTY
}

model Review {
  id         String   @id @default(uuid())
  productId  String
  customerId String
  rating     Int
  title      String?  @db.VarChar(100)
  comment    String?  @db.VarChar(1000)
  isApproved Boolean  @default(false)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  customer   Customer @relation(fields: [customerId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([productId, isApproved, rating])
}

// Order model with enhanced features
model Order {
  id          String @id @default(uuid())
  orderNumber String @unique // e.g., "ORD-20250424-0001"
  customerId  String
  addressId   String

  // Pricing
  subtotal       Decimal
  shipping       Decimal
  tax            Decimal
  discount       Decimal  @default(0)
  couponCode     String?  @db.VarChar(50)
  couponDiscount Decimal? @default(0)
  total          Decimal

  // Status
  status            OrderStatus       @default(PENDING)
  paymentStatus     PaymentStatus     @default(PENDING)
  shippingStatus    ShippingStatus    @default(PENDING)
  fulfillmentStatus FulfillmentStatus @default(UNFULFILLED)

  // Shipping
  trackingCode      String?   @db.VarChar(50)
  trackingUrl       String?   @db.VarChar(255)
  shippingMethod    String?   @db.VarChar(50)
  shippingCarrier   String?   @db.VarChar(50)
  estimatedDelivery DateTime?

  // Customer Communication
  customerNote String? @db.VarChar(500)
  adminNotes   String? @db.VarChar(500)
  emailSent    Boolean @default(false)
  smsSent      Boolean @default(false)

  // Cancellation
  cancelledReason String? @db.VarChar(255)
  cancelledBy     String? @db.VarChar(50)

  // Timestamps
  placedAt    DateTime  @default(now())
  paidAt      DateTime?
  shippedAt   DateTime?
  deliveredAt DateTime?
  cancelledAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  customer        Customer               @relation(fields: [customerId], references: [id])
  address         Address                @relation(fields: [addressId], references: [id])
  items           OrderItem[]
  payments        Payment[]
  refunds         Refund[]
  trackingHistory OrderTrackingHistory[]
  notifications   OrderNotification[]

  @@index([customerId, status, createdAt])
  @@index([orderNumber])
  @@index([trackingCode])
  @@index([placedAt])
}

enum FulfillmentStatus {
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  RESTOCKED
}

// OrderItem with enhanced variant support
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  variantId String?

  // Product Details
  name      String  @db.VarChar(200)
  sku       String  @db.VarChar(50)
  quantity  Int
  unitPrice Decimal
  discount  Decimal @default(0)
  tax       Decimal @default(0)
  total     Decimal

  // Fulfillment
  fulfilledQuantity Int     @default(0)
  returnQuantity    Int     @default(0)
  isReturned        Boolean @default(false)

  // Status
  status OrderItemStatus @default(PENDING)

  // Relations
  order      Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant    ProductVariant?   @relation(fields: [variantId], references: [id])
  returns    OrderItemReturn[]
  RefundItem RefundItem[]

  @@index([orderId, productId])
  @@index([status])
}

enum OrderItemStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  RETURNED
  REFUNDED
  CANCELLED
}

// Order Notification model
model OrderNotification {
  id        String              @id @default(uuid())
  orderId   String
  type      NotificationType
  status    NotificationStatus  @default(PENDING)
  channel   NotificationChannel
  recipient String              @db.VarChar(255)
  subject   String?             @db.VarChar(255)
  content   String              @db.Text
  sentAt    DateTime?
  error     String?             @db.VarChar(255)
  order     Order               @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@index([orderId, type, status])
}

enum NotificationType {
  ORDER_CONFIRMATION
  PAYMENT_CONFIRMATION
  SHIPPING_UPDATE
  DELIVERY_CONFIRMATION
  RETURN_REQUEST
  REFUND_PROCESSED
  ORDER_CANCELLED
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
}

enum NotificationChannel {
  EMAIL
  SMS
  PUSH
  WHATSAPP
}

// Cart model with enhanced features
model Cart {
  id         String     @id @default(uuid())
  customerId String     @unique
  expiresAt  DateTime? // For abandoned cart recovery
  status     CartStatus @default(ACTIVE)

  // Pricing
  subtotal Decimal @default(0)
  discount Decimal @default(0)
  tax      Decimal @default(0)
  shipping Decimal @default(0)
  total    Decimal @default(0)

  // Coupon
  couponCode     String?  @db.VarChar(50)
  couponDiscount Decimal? @default(0)

  // Shipping
  shippingMethod  String? @db.VarChar(50)
  shippingAddress Json? // Stored address for quick checkout

  // Analytics
  lastUpdated DateTime @updatedAt
  itemCount   Int      @default(0)

  customer  Customer   @relation(fields: [customerId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([customerId, status])
  @@index([expiresAt])
}

enum CartStatus {
  ACTIVE
  ABANDONED
  CONVERTED
  EXPIRED
}

// CartItem with enhanced variant support
model CartItem {
  id        String  @id @default(uuid())
  cartId    String
  productId String
  variantId String?
  quantity  Int     @default(1)

  // Pricing
  unitPrice Decimal
  discount  Decimal @default(0)
  tax       Decimal @default(0)
  total     Decimal

  // Status
  isAvailable         Boolean @default(true)
  availabilityMessage String? @db.VarChar(255)

  // Timestamps
  addedAt   DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([cartId, productId, variantId])
  @@index([isAvailable])
}

model Wishlist {
  id         String         @id @default(uuid())
  customerId String         @unique
  customer   Customer       @relation(fields: [customerId], references: [id])
  items      WishlistItem[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model WishlistItem {
  id         String   @id @default(uuid())
  wishlistId String
  productId  String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([wishlistId, productId])
}

// EmailNotification with templates
model EmailNotification {
  id         String      @id @default(uuid())
  userId     String
  toEmail    String
  subject    String
  body       String      @db.Text
  type       EmailType
  templateId String?
  status     EmailStatus @default(PENDING)
  sentAt     DateTime?
  error      String?     @db.Text
  messageId  String?
  retryCount Int         @default(0)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([type])
}

enum EmailType {
  WELCOME_EMAIL
  ACCOUNT_CONFIRMATION
  PASSWORD_RESET
  ORDER_CONFIRMATION
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  ORDER_SHIPPED
  ORDER_DELIVERED
  ACCOUNT_LOCKED
  SECURITY_ALERT
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
}

// Payment model with enhanced gateway integration
model Payment {
  id       String  @id @default(uuid())
  orderId  String
  amount   Decimal
  currency String  @default("BDT") @db.VarChar(3)

  // Payment Details
  method          PaymentMethod
  gateway         PaymentGateway
  transactionId   String?        @unique @db.VarChar(100)
  gatewayOrderId  String?        @db.VarChar(100)
  gatewayResponse Json? // Raw gateway response
  gatewayStatus   String?        @db.VarChar(50)

  // Status
  status       PaymentStatus @default(PENDING)
  isRefundable Boolean       @default(true)

  // Timestamps
  authorizedAt DateTime?
  capturedAt   DateTime?
  refundedAt   DateTime?
  failedAt     DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  order           Order            @relation(fields: [orderId], references: [id])
  refunds         Refund[]
  paymentAttempts PaymentAttempt[]

  @@index([orderId, status, method, createdAt])
  @@index([transactionId])
  @@index([gatewayOrderId])
}

// Payment Attempt model for tracking failed payments
model PaymentAttempt {
  id              String        @id @default(uuid())
  paymentId       String
  amount          Decimal
  status          PaymentStatus
  errorCode       String?       @db.VarChar(50)
  errorMessage    String?       @db.VarChar(255)
  gatewayResponse Json?
  payment         Payment       @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())

  @@index([paymentId, status])
}

enum PaymentMethod {
  BKASH
  NAGAD
  SSL_COMMERZ
  CARD
  COD
  BANK_TRANSFER
}

enum PaymentGateway {
  BKASH
  NAGAD
  SSLCOMMERZ
  STRIPE
  PAYPAL
  MANUAL
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  CAPTURED
  PARTIALLY_REFUNDED
  REFUNDED
  VOIDED
  FAILED
}

// Refund model with enhanced tracking
model Refund {
  id        String  @id @default(uuid())
  orderId   String
  paymentId String?
  amount    Decimal
  currency  String  @default("BDT") @db.VarChar(3)

  // Refund Details
  reason      RefundReason
  status      RefundStatus @default(PENDING)
  type        RefundType   @default(FULL)
  processedBy String? // Admin ID who processed

  // Gateway Integration
  gatewayRefundId String? @db.VarChar(100)
  gatewayResponse Json?
  gatewayStatus   String? @db.VarChar(50)

  // Communication
  notes        String? @db.VarChar(500)
  customerNote String? @db.VarChar(500)

  // Timestamps
  requestedAt DateTime  @default(now())
  processedAt DateTime?
  completedAt DateTime?
  cancelledAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  order   Order        @relation(fields: [orderId], references: [id])
  payment Payment?     @relation(fields: [paymentId], references: [id])
  items   RefundItem[]

  @@index([orderId, status, createdAt])
  @@index([paymentId])
  @@index([gatewayRefundId])
}

// Refund Item model for partial refunds
model RefundItem {
  id          String    @id @default(uuid())
  refundId    String
  orderItemId String
  quantity    Int
  amount      Decimal
  reason      String?   @db.VarChar(255)
  refund      Refund    @relation(fields: [refundId], references: [id], onDelete: Cascade)
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])

  @@index([refundId, orderItemId])
}

enum RefundReason {
  CUSTOMER_REQUEST
  DEFECTIVE_PRODUCT
  WRONG_ITEM
  LATE_DELIVERY
  OTHER
}

enum RefundStatus {
  PENDING
  APPROVED
  PROCESSED
  REJECTED
  CANCELLED
}

enum RefundType {
  FULL
  PARTIAL
  SHIPPING
  RESTOCKING_FEE
}

// BankAccount model with validation
model BankAccount {
  id            String          @id @default(uuid())
  vendorId      String
  bankName      String          @db.VarChar(100)
  accountName   String          @db.VarChar(100)
  accountNumber String          @db.VarChar(50)
  accountType   BankAccountType @default(CURRENT)
  branch        String?         @db.VarChar(100)
  routingNumber String?         @db.VarChar(50)
  isDefault     Boolean         @default(false)
  isVerified    Boolean         @default(false)
  vendor        Vendor          @relation(fields: [vendorId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([vendorId, isDefault])
}

enum BankAccountType {
  CURRENT
  SAVINGS
  SALARY
}

enum DeletionStatus {
  ACTIVE
  DELETED
  ARCHIVED
}

model AuditLog {
  id         String   @id @default(uuid())
  entityType String   @db.VarChar(50) // e.g., "User", "Product", "Order"
  entityId   String   @db.VarChar(50) // ID of the affected entity
  action     String   @db.VarChar(50) // e.g., "CREATE", "UPDATE", "DELETE"
  userId     String?  @db.VarChar(50) // ID of the user who performed the action
  oldData    Json? // Previous state
  newData    Json? // New state
  ipAddress  String?  @db.VarChar(50)
  userAgent  String?  @db.VarChar(255)
  createdAt  DateTime @default(now())

  @@index([entityType, entityId, createdAt])
}

model OrderTrackingHistory {
  id        String      @id @default(uuid())
  orderId   String
  status    OrderStatus
  note      String?     @db.VarChar(500)
  location  String?     @db.VarChar(255)
  updatedBy String      @db.VarChar(50) // User ID who updated the status
  createdAt DateTime    @default(now())
  order     Order       @relation(fields: [orderId], references: [id])

  @@index([orderId, createdAt])
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum ShippingStatus {
  PENDING
  PROCESSING
  SHIPPED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  RETURNED
}

// OrderItemReturn model
model OrderItemReturn {
  id          String       @id @default(uuid())
  orderItemId String
  quantity    Int
  reason      String       @db.VarChar(255)
  status      ReturnStatus @default(PENDING)
  notes       String?      @db.VarChar(500)
  orderItem   OrderItem    @relation(fields: [orderItemId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([orderItemId, status])
}

enum ReturnStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSED
  CANCELLED
}
